#!/usr/bin/env python

# yes, this requires python 2.x and an XML parser module (eg. PyExpat)

import sys
import string
import xml.dom.minidom


# --- Code to represent a widget in memory, and dump it to stdout ---

class WidgetDef:
    def __init__(self):
        self.wclass = None
        self.name = None
        self.property_names = [ 'visible' ]
        self.properties = { 'visible': 'yes' }
        self.signals = []
        self.accels = []
        self.children = []

    def __getitem__(self, name):
        if name == 'name':
            return self.name
        if name == 'class':
            return self.wclass
        return self.properties[name]
    def __setitem__(self, name, value):
        if name == 'name':
            self.name = value
            return
        if name == 'class':
            self.wclass = value
            return
        if self.properties.has_key(name):
            self.property_names.remove(name)
            del self.properties[name]
        if value == 'True': value = 'yes'
        if value == 'False': value = 'no'
        self.property_names.append(name)
        self.properties[name] = value
    def __delitem__(self, name):
        if self.properties.has_key(name):
            self.property_names.remove(name)
            del self.properties[name]
        else:
            raise KeyError, "unknown property `%s'" % name
    def has_prop(self, name):
        return self.properties.has_key(name)
    def rename_prop(self, old_name, new_name):
        if self.has_prop(old_name):
            self[new_name] = self[old_name]
            del self[old_name]

    def add_signal(self, name, handler, object=None, after=0):
        self.signals.append((name, handler, object, after))
    def add_accel(self, key, modifiers, signal):
        self.accels.append((key, modifiers, signal))

    class ChildDef:
        def __init__(self, widget, internal_child=None):
            self.internal_child = None
            self.property_names = []
            self.properties = {}
            self.widget = widget
        def __getitem__(self, name):
            return self.properties[name]
        def __setitem__(self, name, value):
            if self.properties.has_key(name):
                self.property_names.remove(name)
                del self.properties[name]
            if value == 'True': value = 'yes'
            if value == 'False': value = 'no'
            self.property_names.append(name)
            self.properties[name] = value
        def __delitem__(self, name):
            if self.properties.has_key(name):
                self.property_names.remove(name)
                del self.properties[name]
            else:
                raise KeyError, "unknown property `%s'" % name
        def has_prop(self, name):
            return self.properties.has_key(name)
        def rename_prop(self, old_name, new_name):
            if self.has_prop(old_name):
                self[new_name] = self[old_name]
                del self[old_name]
        def dump(self, indent):
            if self.internal_child:
                print '%s<child internal-child="%s">' % \
                      (indent, self.internal_child)
            else:
                print '%s<child>' % indent
            self.widget.dump(indent + '  ')
            if self.properties:
                print '%s  <packing>' % indent
                for name in self.property_names:
                    print '%s    <property name="%s">%s</property>' % \
                          (indent, name, self.properties[name])
                print '%s  </packing>' % indent
            print '%s</child>' % indent

    def add_child(self, widget, internal_child=None):
        child = self.ChildDef(widget, internal_child)
        self.children.append(child)
        return child

    def dump(self, indent):
        print '%s<widget class="%s" id="%s">' %(indent, self.wclass, self.name)
        want_newline = 0
        for name in self.property_names:
            print '%s  <property name="%s">%s</property>' % \
                  (indent, name, self.properties[name])
            want_newline = 1
        if want_newline and (self.signals or self.accels or self.children):
            print

        want_newline = 0
        for name, handler, object, after in self.signals:
            print '%s  <signal name="%s" handler="%s"' % (indent, name,
                                                          handler),
            if object: print 'object="%s"' % object,
            if after: print 'after="yes"',
            print '/>'
            want_newline = 1
        if want_newline and (self.accels or self.children): print

        want_newline = 0
        for key, modifiers, signal in self.accels:
            print '%s  <accelerator key="%s" modifiers="%s" signal="%s" />' % \
                  (indent, key, modifiers, signal)
            want_newline = 1
        if want_newline and self.children: print

        want_newline = 0
        for child in self.children:
            if want_newline: print
            child.dump(indent + '  ')
            want_newline = 1
        print '%s</widget>' % indent


# --- Code to parse the glade1 XML files into WidgetDef instances ---

def totext(nodelist):
    return string.join(map(lambda node: node.toxml(), nodelist), '')

def handle_signal(widget, signalnode):
    name = None
    handler = None
    object = None
    after = 0
    for node in signalnode.childNodes:
	if node.nodeType != node.ELEMENT_NODE:
	    continue
	if node.nodeName == 'name':
	    name = totext(node.childNodes)
	elif node.nodeName == 'handler':
	    handler = totext(node.childNodes)
	elif node.nodeName == 'object':
	    object = totext(node.childNodes)
	elif node.nodeName == 'after':
	    after = (totext(node.childNodes) == 'True')
    widget.add_signal(name, handler, object, after)

def handle_accel(widget, accelnode):
    key = None
    modifiers = None
    signal = None
    for node in accelnode.childNodes:
	if node.nodeType != node.ELEMENT_NODE:
	    continue
	if node.nodeName == 'key':
	    key = totext(node.childNodes)
	    if key[:4] == 'GDK_': key = key[4:]
	elif node.nodeName == 'modifiers':
	    modifiers = totext(node.childNodes)
	elif node.nodeName == 'signal':
	    signal = totext(node.childNodes)
    widget.add_accel(key, modifiers, signal)

def get_child_props(childdef, widgetnode):
    for node in widgetnode.childNodes:
	if node.nodeType != node.ELEMENT_NODE:
	    continue
	if node.nodeName == 'child':
	    child = node
	    break
    else:
	return []
    for node in child.childNodes:
	if node.nodeType != node.ELEMENT_NODE:
	    continue
        childdef[node.nodeName] = totext(node.childNodes)

def handle_widget(widgetnode):
    widget = WidgetDef()
    properties = []
    signals = []
    accels = []
    children = []
    for node in widgetnode.childNodes:
	if node.nodeType != node.ELEMENT_NODE:
	    continue
	if node.nodeName == 'widget':
            child_widget = handle_widget(node)
            childdef = widget.add_child(child_widget)
            get_child_props(childdef, node)
	elif node.nodeName in ('signal', 'Signal'):
	    handle_signal(widget, node)
	elif node.nodeName in ('accelerator', 'Accelerator'):
	    handle_accel(widget, node)
	elif node.nodeName == 'child':
	    pass # handled by the parent widget
	else:
            widget[node.nodeName] = totext(node.childNodes)
    return widget


# --- Code to do widget type specific cleanups ---

name_counter = 0
def make_name():
    global name_counter
    name_counter += 1
    return 'convertwidget' + str(name_counter)

def fixup_widget(widget):
    do_children = 1
    
    # fix up child packing properties for tables
    if widget['class'] == 'GtkTable':
        for childdef in widget.children:
            childdef.rename_prop('xpad', 'x_padding')
            childdef.rename_prop('ypad', 'y_padding')
            
            options = []
            if childdef.has_prop('xexpand'):
                if childdef['xexpand'] == 'yes':
                    options.append('expand')
                del childdef['xexpand']
            if childdef.has_prop('xshrink'):
                if childdef['xshrink'] == 'yes':
                    options.append('shrink')
                del childdef['xshrink']
            if childdef.has_prop('xfill'):
                if childdef['xfill'] == 'yes':
                    options.append('fill')
                del childdef['xfill']
            if options:
                childdef['x_options'] = string.join(options,'|')
            
            options = []
            if childdef.has_prop('yexpand'):
                if childdef['yexpand'] == 'yes':
                    options.append('expand')
                del childdef['yexpand']
            if childdef.has_prop('yshrink'):
                if childdef['yshrink'] == 'yes':
                    options.append('shrink')
                del childdef['yshrink']
            if childdef.has_prop('yfill'):
                if childdef['yfill'] == 'yes':
                    options.append('fill')
                del childdef['yfill']
            if options:
                childdef['y_options'] = string.join(options,'|')

    # add label children to menu items.
    if widget['class'] in ('GtkMenuItem', 'GtkCheckMenuItem',
                           'GtkRadioMenuItem'):
        if widget.has_prop('label'):
            label = WidgetDef()
            label['class'] = 'GtkAccelLabel'
            label['name'] = make_name()
            label['accel-object'] = widget['name']
            label['label'] = widget['label']
            label['use-underline'] = 'yes'
            widget.add_child(label)
            del widget['label']

    if widget['class'] == 'GtkPixmapMenuItem':
        widget['class'] = 'GtkImageMenuItem'

    if widget['class'] == 'GtkDialog':
        childdef = widget.children[0]
        childdef.internal_child = 'vbox'
        del childdef.widget['child_name']

        childdef = filter(lambda x: x.widget.has_prop('child_name'),
                          childdef.widget.children)[0]
        childdef.widget['class'] = 'GtkHButtonBox'
        childdef.internal_child = 'action_area'
        del childdef.widget['child_name']

    if do_children:
        for childdef in widget.children:
            fixup_widget(childdef.widget)


# --- parse the file for widget definitions, fixup problems and dump.

def handle_file(filename):
    document = xml.dom.minidom.parse(filename)
    
    widgets = []
    for node in document.documentElement.childNodes:
	if node.nodeType == node.ELEMENT_NODE and \
	   node.nodeName == 'widget':
            widgets.append(handle_widget(node))

    print '<?xml version="1.0" standalone="no"?> <!--*- mode: xml -*-->'
    print '<!DOCTYPE glade-interface SYSTEM "glade-2.0.dtd" >'
    print
    print '<glade-interface>'
    indent = '  '

    for widgetdef in widgets:
        fixup_widget(widgetdef)
        widgetdef.dump(indent)

    print '</glade-interface>'
    document.unlink() # only needed for python interpreters without cyclic gc

if __name__ == '__main__':
    if len(sys.argv) != 2:
	print >> sys.stderr, 'usage: libglade-convert oldfile.glade'
	sys.exit(1)
    handle_file(sys.argv[1])
